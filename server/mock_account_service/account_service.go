// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/lileio/account_service (interfaces: AccountServiceClient)

package mock_account_service

import (
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	account_service "github.com/lileio/account_service"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of AccountServiceClient interface
type MockAccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAccountServiceClientRecorder
}

// Recorder for MockAccountServiceClient (not exported)
type _MockAccountServiceClientRecorder struct {
	mock *MockAccountServiceClient
}

func NewMockAccountServiceClient(ctrl *gomock.Controller) *MockAccountServiceClient {
	mock := &MockAccountServiceClient{ctrl: ctrl}
	mock.recorder = &_MockAccountServiceClientRecorder{mock}
	return mock
}

func (_m *MockAccountServiceClient) EXPECT() *_MockAccountServiceClientRecorder {
	return _m.recorder
}

func (_m *MockAccountServiceClient) AuthenticateByEmail(_param0 context.Context, _param1 *account_service.AuthenticateByEmailRequest, _param2 ...grpc.CallOption) (*account_service.Account, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AuthenticateByEmail", _s...)
	ret0, _ := ret[0].(*account_service.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) AuthenticateByEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthenticateByEmail", _s...)
}

func (_m *MockAccountServiceClient) ConfirmAccount(_param0 context.Context, _param1 *account_service.ConfirmAccountRequest, _param2 ...grpc.CallOption) (*account_service.Account, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ConfirmAccount", _s...)
	ret0, _ := ret[0].(*account_service.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) ConfirmAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfirmAccount", _s...)
}

func (_m *MockAccountServiceClient) Create(_param0 context.Context, _param1 *account_service.CreateAccountRequest, _param2 ...grpc.CallOption) (*account_service.Account, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Create", _s...)
	ret0, _ := ret[0].(*account_service.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", _s...)
}

func (_m *MockAccountServiceClient) Delete(_param0 context.Context, _param1 *account_service.DeleteAccountRequest, _param2 ...grpc.CallOption) (*empty.Empty, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", _s...)
}

func (_m *MockAccountServiceClient) GeneratePasswordToken(_param0 context.Context, _param1 *account_service.GeneratePasswordTokenRequest, _param2 ...grpc.CallOption) (*account_service.GeneratePasswordTokenResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GeneratePasswordToken", _s...)
	ret0, _ := ret[0].(*account_service.GeneratePasswordTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) GeneratePasswordToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GeneratePasswordToken", _s...)
}

func (_m *MockAccountServiceClient) GetByEmail(_param0 context.Context, _param1 *account_service.GetByEmailRequest, _param2 ...grpc.CallOption) (*account_service.Account, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetByEmail", _s...)
	ret0, _ := ret[0].(*account_service.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) GetByEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByEmail", _s...)
}

func (_m *MockAccountServiceClient) GetById(_param0 context.Context, _param1 *account_service.GetByIdRequest, _param2 ...grpc.CallOption) (*account_service.Account, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetById", _s...)
	ret0, _ := ret[0].(*account_service.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) GetById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetById", _s...)
}

func (_m *MockAccountServiceClient) List(_param0 context.Context, _param1 *account_service.ListAccountsRequest, _param2 ...grpc.CallOption) (*account_service.ListAccountsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "List", _s...)
	ret0, _ := ret[0].(*account_service.ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", _s...)
}

func (_m *MockAccountServiceClient) ResetPassword(_param0 context.Context, _param1 *account_service.ResetPasswordRequest, _param2 ...grpc.CallOption) (*account_service.Account, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ResetPassword", _s...)
	ret0, _ := ret[0].(*account_service.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) ResetPassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetPassword", _s...)
}

func (_m *MockAccountServiceClient) Update(_param0 context.Context, _param1 *account_service.UpdateAccountRequest, _param2 ...grpc.CallOption) (*account_service.Account, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Update", _s...)
	ret0, _ := ret[0].(*account_service.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAccountServiceClientRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", _s...)
}
